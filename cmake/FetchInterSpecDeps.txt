find_package(Git)
include(FetchContent)

message("It may take 10 or 20 minutes to clone into boost and Wt repos...")

# We'll set the install directory to somewhere not /usr/local or something, so we dont
#  mess the system filesystem up; Wt and zlib will install 
#set( CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/prefix/" CACHE INTERNAL ""  )


set( BOOST_IOSTREAMS_ENABLE_ZSTD OFF CACHE INTERNAL ""  )
set( BOOST_IOSTREAMS_ENABLE_ZLIB OFF CACHE INTERNAL ""  )
set( BOOST_IOSTREAMS_ENABLE_LZMA OFF CACHE INTERNAL ""  )
set( BOOST_IOSTREAMS_ENABLE_BZIP2 OFF CACHE INTERNAL ""  )
set(BUILD_SHARED_LIBS OFF CACHE INTERNAL "Build SHARED libraries")

# TODO: set BOOST libraries to not build, like wave, beast, wserialization, etc

# CMAKE_CURRENT_SOURCE_DIR could either be project base directory, or a target 
#  directory, so we will search for the patch files to apply
find_file( WT_PATCH_FILE "wt/3.7.1/FetchContent/wt_3.7.1_FetchContent.git.patch"  
  PATHS "${CMAKE_CURRENT_SOURCE_DIR}/target/patches"
        "${CMAKE_CURRENT_SOURCE_DIR}/../target/patches"
        "${CMAKE_CURRENT_SOURCE_DIR}/../../target/patches"
  REQUIRED NO_DEFAULT_PATH
) 

find_file( ZLIB_PATCH_FILE "zlib/1.2.12/FetchContent/zlib_1.2.12.git.patch"  
  PATHS "${CMAKE_CURRENT_SOURCE_DIR}/target/patches"
        "${CMAKE_CURRENT_SOURCE_DIR}/../target/patches"
        "${CMAKE_CURRENT_SOURCE_DIR}/../../target/patches"
  REQUIRED NO_DEFAULT_PATH
)



FetchContent_Declare(
  boost
  #URL /Users/wcjohns/install/wt_fetch_contents/boost-5df8086b733798c8e08e316626a16babe11bd0d2.zip
  GIT_REPOSITORY https://github.com/boostorg/boost.git
  GIT_TAG        5df8086b733798c8e08e316626a16babe11bd0d2 # release-1.79 - beta 1
  GIT_SHALLOW    ON
)

#FetchContent_GetProperties(boost)
#if(NOT boost_POPULATED)
#  FetchContent_Populate(boost)
#  add_subdirectory(${boost_SOURCE_DIR} ${boost_BINARY_DIR} EXCLUDE_FROM_ALL)
#endif()

FetchContent_Declare(
  wt
  #URL /Users/wcjohns/install/wt_fetch_contents/wt-b84925215d2b45879cf20c0cb340c4e7960d0c53.zip
  GIT_REPOSITORY https://github.com/emweb/wt.git
  GIT_TAG        b84925215d2b45879cf20c0cb340c4e7960d0c53 # 3.7.1
  GIT_SHALLOW    ON

  #The '|| true' is in next command is due to bug in cmake I think: https://gitlab.kitware.com/cmake/cmake/-/issues/21146
  PATCH_COMMAND ${GIT_EXECUTABLE} apply --reverse --check --ignore-space-change --ignore-whitespace ${WT_PATCH_FILE} || ${GIT_EXECUTABLE} apply --ignore-space-change --ignore-whitespace ${WT_PATCH_FILE}
  #PATCH_COMMAND patch -p1 < ${WT_PATCH_FILE} || true
)

# We will explicitly populate Wt and boost, rather than using this next line, so this way when the user
#  builds the install target (e.g., for electron build), it wont install stuff to /usr/local
# FetchContent_MakeAvailable( wt boost )

FetchContent_GetProperties(wt)
if(NOT wt_POPULATED)
  FetchContent_Populate(wt)
  add_subdirectory(${wt_SOURCE_DIR} ${wt_BINARY_DIR} EXCLUDE_FROM_ALL)
endif()

FetchContent_GetProperties(boost)
if(NOT boost_POPULATED)
  FetchContent_Populate(boost)
  add_subdirectory(${boost_SOURCE_DIR} ${boost_BINARY_DIR} EXCLUDE_FROM_ALL)
endif()

# Since we arent installing Wt, the InterSpec CMakeLists.txt wont find Wt resources,
#  so we'll hard code this directory.
set(WT_RESOURCES_DIRECTORY "${wt_SOURCE_DIR}/resources" CACHE INTERNAL "Set Wt resources dir")


# If we run the Cmake "install" target (e.g., for Electron build), we'll get an error because 
# ${boost_BINARY_DIR}/cmake_install.cmake doesnt exist, so we'll just put a dummy 
# there, and things seem to work
#   However, the proper fix would be something like:
#     https://stackoverflow.com/questions/65527126/disable-install-for-fetchcontent#answer-65529161
#   Or maybe even better yet, we should modify the patching for Wt and zlib to remove the instal(...) commands
write_file( "${boost_BINARY_DIR}/cmake_install.cmake" "# This is a dummy patch file the InterSpec build put in" )


# macOS, iOS, and Android all have zlib already - we dont need to build it
if( NOT APPLE AND NOT ANDROID )
  set(BUILD_SHARED_LIBS OFF CACHE INTERNAL "Build SHARED libraries")

  FetchContent_Declare(
    zlib
    GIT_REPOSITORY https://github.com/madler/zlib.git
    GIT_TAG        21767c654d31d2dccdde4330529775c6c5fd5389 # 1.2.12
    GIT_SHALLOW    ON

    #The '|| true' is in next command is due to bug in cmake I think: https://gitlab.kitware.com/cmake/cmake/-/issues/21146
    PATCH_COMMAND ${GIT_EXECUTABLE} apply --reverse --check --ignore-space-change --ignore-whitespace ${ZLIB_PATCH_FILE} || ${GIT_EXECUTABLE} apply --ignore-space-change --ignore-whitespace ${ZLIB_PATCH_FILE}
    #PATCH_COMMAND patch -p1 < ${ZLIB_PATCH_FILE} || true
  )

  FetchContent_GetProperties(zlib)
  if(NOT zlib_POPULATED)
    FetchContent_Populate(zlib)
    add_subdirectory(${zlib_SOURCE_DIR} ${zlib_BINARY_DIR} EXCLUDE_FROM_ALL)
  endif()

  FetchContent_MakeAvailable( zlib )
   
  if( ZLIB::zlib ) 
    # Hmmm, not sure if we ever actually get here
    add_library( ZLIB::ZLIB ALIAS ZLIB::zlib )
  elseif( NOT ZLIB::ZLIB )
    # On Linux, we seem to always get here, so we'll just hack things.  
    #  I must not understand the export(...) cmake stuff of the sub-project - oh well for now.
    add_library( ZLIB::ZLIB ALIAS zlib )
    set( ZLIB_LIBRARY zlib CACHE INTERNAL "set zlib static lib" )
    set( ZLIB_INCLUDE_DIR "${zlib_BINARY_DIR}" CACHE INTERNAL "set zlib include dir" )
  endif()
endif( NOT APPLE AND NOT ANDROID )


message("Building Wt and boost may also take up to a couple hours...")