apply plugin: 'com.android.application'

def keystore_file = local_props("keystore.location")
def keystore_pword = local_props("keystore.password")
def keystore_alias_name = local_props("keystore.alias.name")
def keystore_alias_pword = local_props("keystore.alias.password")


android {
    signingConfigs {
        config {
            keyAlias keystore_alias_name
            keyPassword keystore_alias_pword
            storeFile file(keystore_file)
            storePassword keystore_pword
        }
    }

    compileSdkVersion 32
    ndkVersion '23.1.7779620'

    defaultConfig {
        applicationId "gov.sandia.interspec"
        minSdkVersion 19
        targetSdkVersion 32
        versionCode 9
        versionName "1.0.10"
 //       testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        signingConfig signingConfigs.config
    }
//    buildFeatures {
//        viewBinding true
//    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
  //          signingConfig signingConfigs.config
        }
    }
    //externalNativeBuild {
    //    cmake {
    //        path "../../../../CMakeLists.txt"
    //    }
    //}
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
            version "3.23.0"
        }
    }

    flavorDimensions 'cpuArch'
    productFlavors {
        arm8 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
        }
        x86_64 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'x86_64', 'x86'
            }
        }
        universal {
            dimension 'cpuArch'
            // include all default ABIs. with NDK-r16,  it is:
            //   armeabi-v7a, arm64-v8a, x86, x86_64
        }
    }
    //buildToolsVersion '27.0.3'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
}

//------------------------------------------------------------
def local_props(key) { // reads ~ value from local.properties
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}

task makeAssets(type:Exec) {
    workingDir '../'

    //on windows:
    //commandLine 'cmd', '/c', 'stop.bat'

    //on linux
    commandLine './make_assets.sh'
}

preBuild.dependsOn makeAssets

gradle.projectsEvaluated {
    assembleRelease.dependsOn makeAssets
    assembleDebug.dependsOn makeAssets
}

