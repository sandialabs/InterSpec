diff --git a/CMakeLists.txt b/CMakeLists.txt
index 15aab351..90dfee07 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,18 +1,50 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.15)
+
+set( CMAKE_CXX_STANDARD 11 CACHE INTERNAL "cxx standard" )
+set( CMAKE_CXX_STANDARD_REQUIRED ON CACHE INTERNAL "require std std"  )
+set( CMAKE_CXX_EXTENSIONS OFF CACHE INTERNAL "no cxx extensions"  )
+set( CMAKE_REQUIRED_FLAGS "-std=c++11" )
+set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
+
+set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>" CACHE INTERNAL "Use MSVC static runtime" )
 
 SET(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE true)
 
-IF(COMMAND CMAKE_POLICY)
-  CMAKE_POLICY(SET CMP0002 OLD)
-  CMAKE_POLICY(SET CMP0003 OLD)
-  CMAKE_POLICY(SET CMP0005 OLD)
-  if(POLICY CMP0022)
+#IF(COMMAND CMAKE_POLICY)
+#  CMAKE_POLICY(SET CMP0002 OLD)
+#  CMAKE_POLICY(SET CMP0003 OLD)
+#  CMAKE_POLICY(SET CMP0005 OLD)
+#  if(POLICY CMP0022)
     # Stops CMake from warning about CMP0022, even though we don't actually use
     # the LINK_INTERFACE_LIBRARIES or INTERFACE_LINK_LIBRARIES (only indirectly
     # through PUBLIC/PRIVATE in TARGET_LINK_LIBRARIES)
-    CMAKE_POLICY(SET CMP0022 NEW)
-  endif(POLICY CMP0022)
-ENDIF(COMMAND CMAKE_POLICY)
+#    CMAKE_POLICY(SET CMP0022 NEW)
+  #endif(POLICY CMP0022)
+#ENDIF(COMMAND CMAKE_POLICY)
+
+
+set( CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}" )
+
+include(FetchContent)
+
+FetchContent_Declare(
+  boost
+  GIT_REPOSITORY https://github.com/boostorg/boost.git
+  GIT_TAG        5df8086b733798c8e08e316626a16babe11bd0d2 # release-1.79 - beta 1
+  GIT_SHALLOW    ON
+)
+
+FetchContent_GetProperties(boost)
+if(NOT boost_POPULATED)
+  FetchContent_Populate(boost)
+  
+  set(BUILD_SHARED_LIBS OFF CACHE INTERNAL "Build SHARED libraries")
+
+  add_subdirectory(${boost_SOURCE_DIR} ${boost_BINARY_DIR} EXCLUDE_FROM_ALL)
+endif()
+
+set( Boost_INCLUDE_DIR "${boost_SOURCE_DIR}" )
+
 
 PROJECT(WT)
 
@@ -26,13 +58,14 @@ SET(VERSION_SERIES 3)
 SET(VERSION_MAJOR 7)
 SET(VERSION_MINOR 1)
 
-IF(NOT SHARED_LIBS)
-  IF(WIN32)
-    OPTION(SHARED_LIBS "Compile shared libraries" OFF)
-  ELSE(WIN32)
-    OPTION(SHARED_LIBS "Compile shared libraries" ON)
-  ENDIF(WIN32)
-ENDIF(NOT SHARED_LIBS)
+#IF(NOT SHARED_LIBS)
+#  IF(WIN32)
+#    OPTION(SHARED_LIBS "Compile shared libraries" OFF)
+#  ELSE(WIN32)
+#    OPTION(SHARED_LIBS "Compile shared libraries" ON)
+#  ENDIF(WIN32)
+#ENDIF(NOT SHARED_LIBS)
+OPTION(SHARED_LIBS "Compile shared libraries" OFF)
 
 IF(ANDROID)
   IF(NOT DEFINED ANDROID_SDK_DIR)
@@ -85,21 +118,21 @@ ENDIF(GCC_COMPILER_VERSION MATCHES ".*4\\.4\\.4\\-14ubuntu5.*")
 #
 # Various things that must be configured by the user or packager ...
 #
-OPTION(BUILD_EXAMPLES "Build examples" ON)
+OPTION(BUILD_EXAMPLES "Build examples" OFF)
 OPTION(INSTALL_DOCUMENTATION "Install documentation (tutorials and reference)" OFF)
 OPTION(INSTALL_EXAMPLES "Install examples (binaries and source)" OFF)
 OPTION(INSTALL_RESOURCES "Install resources directory" ON)
 OPTION(INSTALL_FINDWT_CMAKE_FILE "Install FindWt.cmake in systemwide cmake dir (in addition to CMAKE_INSTALL_PREFIX/cmake)" OFF)
-OPTION(ENABLE_SSL "Enable cryptography functions, using OpenSSL" ON)
+OPTION(ENABLE_SSL "Enable cryptography functions, using OpenSSL" OFF)
 OPTION(ENABLE_HARU "Enable Haru Free PDF Library, which is used to provide support for painting to PDF (WPdfImage)" ON)
-OPTION(ENABLE_PANGO "Enable Pango Library, which is used for improved font support (WPdfImage and WRasterImage)" ON)
+OPTION(ENABLE_PANGO "Enable Pango Library, which is used for improved font support (WPdfImage and WRasterImage)" OFF)
 OPTION(ENABLE_EXT "Build Wt Ext library with JavaScript-only widgets (http://extjs.com/) DEPRECATED" OFF)
 OPTION(ENABLE_SQLITE "Build SQLite3 backend for Wt::Dbo" ON)
-OPTION(ENABLE_POSTGRES "Build PostgreSQL backend for Wt::Dbo" ON)
-OPTION(ENABLE_FIREBIRD "Build FirebirdSQL backend for Wt::Dbo" ON)
+OPTION(ENABLE_POSTGRES "Build PostgreSQL backend for Wt::Dbo" OFF)
+OPTION(ENABLE_FIREBIRD "Build FirebirdSQL backend for Wt::Dbo" OFF)
 OPTION(ENABLE_MYSQL "Build mariadb/mysql backend for Wt::Dbo" ON)
-OPTION(ENABLE_MSSQLSERVER "Build Microsoft SQL Server backend for Wt::Dbo" ON)
-OPTION(ENABLE_QT4 "Build Qt4 interworking library (libwtwithqt" ON)
+OPTION(ENABLE_MSSQLSERVER "Build Microsoft SQL Server backend for Wt::Dbo" OFF)
+OPTION(ENABLE_QT4 "Build Qt4 interworking library (libwtwithqt" OFF)
 OPTION(ENABLE_LIBWTTEST "Build Wt::Test" ON)
 OPTION(ENABLE_LIBWTDBO "Build Wt::Dbo" ON)
 OPTION(WT_NO_STD_LOCALE "Build Wt to run on a system without std::locale support" OFF)
@@ -113,7 +146,7 @@ OPTION(ENABLE_UNWIND "Build Wt with stacktrace support using libunwind" OFF)
 # We're not sure yet if you can safely link Wt compiled in 03 mode against
 # an application compiled in 11 mode. Boost probably causes problems here
 # (specially boost.signals2)
-IF(NOT MSVC)
+#IF(NOT MSVC)
   # For now, don't auto-detect
   #IF(CMAKE_COMPILER_IS_GNUCXX)
   #  execute_process(COMMAND ${CMAKE_C_COMPILER} "-dumpversion"
@@ -122,17 +155,20 @@ IF(NOT MSVC)
   #    SET(HAS_CXX11 ON)
   #  ENDIF(${GCC_VERSION} VERSION_GREATER "4.5.99")
   #ENDIF(CMAKE_COMPILER_IS_GNUCXX)
-  SET(WT_CPP_11_MODE "" CACHE STRING "C++ mode to compile Wt in (leave empty for your compiler's default, or set to -std=c++11, -std=c++0x, ...)")
-  IF(WT_CPP_11_MODE)
-    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WT_CPP_11_MODE}")
-    SET(HAS_CXX11 ON)
-  ENDIF(WT_CPP_11_MODE)
-ELSE(NOT MSVC)
-  # For once, msvs is easier than gcc/llvm
-  IF(MSVC_VERSION GREATER 1600)
-    SET(HAS_CXX11 ON)
-  ENDIF(MSVC_VERSION GREATER 1600)
-ENDIF(NOT MSVC)
+#  SET(WT_CPP_11_MODE "" CACHE STRING "C++ mode to compile Wt in (leave empty for your compiler's default, or set to -std=c++11, -std=c++0x, ...)")
+#  IF(WT_CPP_11_MODE)
+#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WT_CPP_11_MODE}")
+#    SET(HAS_CXX11 ON)
+#  ENDIF(WT_CPP_11_MODE)
+#ELSE(NOT MSVC)
+#  # For once, msvs is easier than gcc/llvm
+#  IF(MSVC_VERSION GREATER 1600)
+#    SET(HAS_CXX11 ON)
+#  ENDIF(MSVC_VERSION GREATER 1600)
+#ENDIF(NOT MSVC)
+
+SET(HAS_CXX11 ON)
+
 
 IF(MSVC)
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
@@ -344,7 +380,10 @@ find_package(PNG)
 set(ZLIB_ROOT ${ZLIB_PREFIX})
 find_package(ZLIB)
 
-INCLUDE(cmake/WtFindBoost.txt)
+#INCLUDE(cmake/WtFindBoost.txt)
+#find_package( Boost COMPONENTS regex program_options filesystem thread BOOST_ROOT )
+
+
 INCLUDE(cmake/WtFindFcgi.txt)
 INCLUDE(cmake/WtFindSsl.txt)
 INCLUDE(cmake/WtFindMysql.txt)
@@ -376,63 +415,63 @@ ENDIF(ENABLE_QT4)
 
 INCLUDE(FindThreads)
 
-IF(NOT BOOST_WT_FOUND)
-  SET(ERR
-     "Could not find a boost installation in " ${BOOST_PREFIX} ".\n\n"
-      "There are two methods in Wt to find boost:\n\n"
-      "1. Find boost through cmake (recommended)\n"
-      "This requires cmake 2.6, and is in "
-      "that case the default (unless BOOST_COMPILER or BOOST_VERSION is "
-      "defined). This method requires a multi-threaded boost installation.\n"
-      "You may need to add your boost version number to "
-      "Boost_ADDITIONAL_VERSIONS, and/or set BOOST_PREFIX to the location "
-      "where boost is installed.\n\n"
-      "2. Use the Wt-proprietary method to find boost.\n"
-      "This requires you to define three variables:\n"
-      "BOOST_PREFIX: set to the directory where you installed boost\n"
-      "BOOST_COMPILER: set to the compiler signature as you find them in "
-      "library names (e.g.: gcc42)\n"
-      "BOOST_VERSION: set to the boost version, again as you find them in "
-      "the library names (e.g.: 1_38)\n\n"
-      "Note 1: WT_BOOST_DISCOVERY is the variable that selects the boost "
-      "discovery method. When set to false, method 1 is used (default if "
-      "cmake version is recent enough and BOOST_COMPILER and BOOST_VERSION "
-      "are not defined). When set to true, method 2 is used.\n"
-      "Note 2: the code to discover boost is located in cmake/WtFindBoost.txt\n"
-      "Note 3: on windows, set BOOST_PREFIX to the full path, eg "
-      "c:/Program Files/boost/boost_1_38\n\n"
-      "Note 4: if you do not have boost.random, set WT_NO_BOOST_RANDOM to ON"
-      "Wt requires the following C++ boost libraries: date_time, regex, program_options, signals, random, and optionally thread")
-  MESSAGE(FATAL_ERROR ${ERR})
-ENDIF(NOT BOOST_WT_FOUND)
-
-IF(BOOST_WT_MT_FOUND)
-  IF(MULTI_THREADED)
+#IF(NOT BOOST_WT_FOUND)
+#  SET(ERR
+#     "Could not find a boost installation in " ${BOOST_PREFIX} ".\n\n"
+#      "There are two methods in Wt to find boost:\n\n"
+#      "1. Find boost through cmake (recommended)\n"
+#      "This requires cmake 2.6, and is in "
+#      "that case the default (unless BOOST_COMPILER or BOOST_VERSION is "
+#      "defined). This method requires a multi-threaded boost installation.\n"
+#      "You may need to add your boost version number to "
+#      "Boost_ADDITIONAL_VERSIONS, and/or set BOOST_PREFIX to the location "
+#      "where boost is installed.\n\n"
+#      "2. Use the Wt-proprietary method to find boost.\n"
+#      "This requires you to define three variables:\n"
+#      "BOOST_PREFIX: set to the directory where you installed boost\n"
+#      "BOOST_COMPILER: set to the compiler signature as you find them in "
+#      "library names (e.g.: gcc42)\n"
+#      "BOOST_VERSION: set to the boost version, again as you find them in "
+#      "the library names (e.g.: 1_38)\n\n"
+#      "Note 1: WT_BOOST_DISCOVERY is the variable that selects the boost "
+#      "discovery method. When set to false, method 1 is used (default if "
+#      "cmake version is recent enough and BOOST_COMPILER and BOOST_VERSION "
+#      "are not defined). When set to true, method 2 is used.\n"
+#      "Note 2: the code to discover boost is located in cmake/WtFindBoost.txt\n"
+#      "Note 3: on windows, set BOOST_PREFIX to the full path, eg "
+#      "c:/Program Files/boost/boost_1_38\n\n"
+#      "Note 4: if you do not have boost.random, set WT_NO_BOOST_RANDOM to ON"
+#      "Wt requires the following C++ boost libraries: date_time, regex, program_options, signals, random, and optionally thread")
+#  MESSAGE(FATAL_ERROR ${ERR})
+#ENDIF(NOT BOOST_WT_FOUND)
+
+#IF(BOOST_WT_MT_FOUND)
+#  IF(MULTI_THREADED)
     MESSAGE("** Enabling multi threading.")
     SET(MULTI_THREADED_BUILD true)
     SET(WT_THREADED true)
     ADD_DEFINITIONS(-D_REENTRANT -DBOOST_SPIRIT_THREADSAFE)
-  ELSE(MULTI_THREADED)
-    MESSAGE("** Disabling multi threading.")
-    SET(MULTI_THREADED_BUILD false)
-
-    ADD_DEFINITIONS(-DBOOST_DISABLE_THREADS -DSQLITE_THREADSAFE=0)
-  ENDIF(MULTI_THREADED)
-ELSE(BOOST_WT_MT_FOUND)
-  SET(MULTI_THREADED_BUILD false)
-  MESSAGE("** Disabling multi threading: could not find multi-threaded boost libraries")
-  ADD_DEFINITIONS(-DBOOST_DISABLE_THREADS -DSQLITE_THREADSAFE=0)
-ENDIF(BOOST_WT_MT_FOUND)
+#  ELSE(MULTI_THREADED)
+#    MESSAGE("** Disabling multi threading.")
+#    SET(MULTI_THREADED_BUILD false)
+#
+#    ADD_DEFINITIONS(-DBOOST_DISABLE_THREADS -DSQLITE_THREADSAFE=0)
+#  ENDIF(MULTI_THREADED)
+#ELSE(BOOST_WT_MT_FOUND)
+#  SET(MULTI_THREADED_BUILD false)
+#  MESSAGE("** Disabling multi threading: could not find multi-threaded boost libraries")
+#  ADD_DEFINITIONS(-DBOOST_DISABLE_THREADS -DSQLITE_THREADSAFE=0)
+#ENDIF(BOOST_WT_MT_FOUND)
 
 # decide on signals vs signals2
 # boost 1.54 deprecated boost signals -> use signals2
-IF ((${Boost_MAJOR_VERSION} EQUAL 1 AND ${Boost_MINOR_VERSION} GREATER 53) OR (${Boost_MAJOR_VERSION} GREATER 1))
+#IF ((${Boost_MAJOR_VERSION} EQUAL 1 AND ${Boost_MINOR_VERSION} GREATER 53) OR (${Boost_MAJOR_VERSION} GREATER 1))
   MESSAGE(STATUS "Boost ${Boost_VERSION} > 1.53, WT_SIGNALS_IMPLEMENTATION = boost.signals2 recommended")
   SET(DEFAULT_WT_SIGNALS_IMPLEMENTATION "boost.signals2")
-ELSE()
-  SET(DEFAULT_WT_SIGNALS_IMPLEMENTATION "boost.signals")
-  MESSAGE(STATUS "Boost ${Boost_VERSION} < 1.54, WT_SIGNALS_IMPLEMENTATION = boost.signals recommended")
-ENDIF()
+#ELSE()
+#  SET(DEFAULT_WT_SIGNALS_IMPLEMENTATION "boost.signals")
+#  MESSAGE(STATUS "Boost ${Boost_VERSION} < 1.54, WT_SIGNALS_IMPLEMENTATION = boost.signals recommended")
+#ENDIF()
 SET(WT_SIGNALS_IMPLEMENTATION ${DEFAULT_WT_SIGNALS_IMPLEMENTATION} CACHE STRING "Select what implementation should be used for Wt signals")
 IF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 8)
   MESSAGE(STATUS "Informational: WT_SIGNALS_IMPLEMENTATION should be either boost.signals or boost.signals2")
@@ -488,7 +527,8 @@ ENDIF (${WT_WRASTERIMAGE_IMPLEMENTATION} STREQUAL "GraphicsMagick")
 FIND_PACKAGE(Doxygen)
 
 # Boost is used nearly everywhere, so we can put these here
-INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIRS})
+INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR} ${Boost_INCLUDE_DIRS} )
+
 LINK_DIRECTORIES(${BOOST_LIB_DIRS})
 IF(WIN32)
   IF(BOOST_DYNAMIC)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index c65812e1..0a085ef0 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -4,11 +4,11 @@ INCLUDE_DIRECTORIES(
   ${CMAKE_CURRENT_SOURCE_DIR}/web
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_BINARY_DIR} # for WConfig.h
-  ${BOOST_INCLUDE_DIRS}
+#  ${BOOST_INCLUDE_DIRS}
   Wt/Dbo/backend/amalgamation # for sqlite3.h
 )
 
-LINK_DIRECTORIES(${BOOST_LIB_DIRS})
+#LINK_DIRECTORIES(${BOOST_LIB_DIRS})
 
 MACRO (FILE_TO_STRING infile outfile var)
 ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${outfile}
@@ -457,21 +457,37 @@ ENDIF(WIN32)
 ADD_LIBRARY(wt ${libsources})
 TARGET_LINK_LIBRARIES(wt
   PUBLIC
-    ${BOOST_WT_LIBRARIES}
+#    ${BOOST_WT_LIBRARIES}
+    Boost::filesystem Boost::program_options Boost::regex Boost::date_time Boost::system Boost::thread Boost::asio Boost::signals2 Boost::random Boost::any Boost::interprocess Boost::foreach Boost::multi_index
     ${WT_SOCKET_LIBRARY}
   PRIVATE
     ${WT_MATH_LIBRARY}
     ${RT_LIBRARY}
     )
 
+#set_property( TARGET wt PROPERTY CXX_STANDARD 14 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO )
+
+message( "boost_SOURCE_DIR=${boost_SOURCE_DIR}" )
+target_include_directories( wt 
+  PUBLIC 
+    ${CMAKE_CURRENT_SOURCE_DIR} 
+    ${CMAKE_CURRENT_SOURCE_DIR}/web
+    ${CMAKE_CURRENT_BINARY_DIR} # for WConfig.h
+    Wt/Dbo/backend/amalgamation # for sqlite3.h
+    ${boost_SOURCE_DIR}/libs/numeric/ublas/include
+)
+
+
 IF(ENABLE_LIBWTTEST)
   ADD_LIBRARY(wttest
     Wt/Test/WTestEnvironment.C
   )
 
+  #set_property( TARGET wttest PROPERTY CXX_STANDARD 14 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO )
   TARGET_LINK_LIBRARIES(wttest
     PUBLIC
       wt
+      Boost::unit_test
     PRIVATE
       ${RT_LIBRARY}
       )
diff --git a/src/Wt/Dbo/CMakeLists.txt b/src/Wt/Dbo/CMakeLists.txt
index 70b56636..5480cf76 100644
--- a/src/Wt/Dbo/CMakeLists.txt
+++ b/src/Wt/Dbo/CMakeLists.txt
@@ -31,10 +31,22 @@ IF(ENABLE_LIBWTDBO)
     StringStream.C
   )
 
+
+TARGET_LINK_LIBRARIES(wtdbo PUBLIC Boost::any Boost::multi_index Boost::exception )
+#set_property( TARGET wtdbo PROPERTY CXX_STANDARD 14 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO )
+
+target_include_directories( wtdbo 
+  PUBLIC 
+#    ${CMAKE_CURRENT_SOURCE_DIR} 
+    ${boost_SOURCE_DIR}/libs/multi_index/include
+)
+
+
   IF(HAVE_UNWIND)
     TARGET_LINK_LIBRARIES(wtdbo PRIVATE ${UNWIND_LIBRARIES})
   ENDIF(HAVE_UNWIND)
 
+
   IF(MSVC AND Boost_MAJOR_VERSION EQUAL 1 AND Boost_MINOR_VERSION LESS 70)
     #win32 links automatically against boost libs; specifying too much causes
     #trouble
@@ -43,15 +55,16 @@ IF(ENABLE_LIBWTDBO)
     ENDIF(MULTI_THREADED_BUILD)
   ELSE()
     IF(MULTI_THREADED_BUILD)
-      TARGET_LINK_LIBRARIES(wtdbo PUBLIC ${BOOST_THREAD_LIB} ${BOOST_SYSTEM_LIB} ${CMAKE_THREAD_LIBS_INIT} ${BOOST_DT_LIB})
+#      TARGET_LINK_LIBRARIES(wtdbo PUBLIC ${BOOST_THREAD_LIB} ${BOOST_SYSTEM_LIB} ${CMAKE_THREAD_LIBS_INIT} ${BOOST_DT_LIB})
+      TARGET_LINK_LIBRARIES(wtdbo PUBLIC  Boost::thread Boost::system Boost::date_time )
     ELSE(MULTI_THREADED_BUILD)
       TARGET_LINK_LIBRARIES(wtdbo PUBLIC ${BOOST_DT_LIB})
     ENDIF(MULTI_THREADED_BUILD)
   ENDIF()
 
-  IF(TARGET Boost::headers)
-    TARGET_LINK_LIBRARIES(wtdbo PUBLIC Boost::headers)
-  ENDIF()
+#  IF(TARGET Boost::headers)
+#    TARGET_LINK_LIBRARIES(wtdbo PUBLIC Boost::headers)
+#  ENDIF()
 
   INSTALL(TARGETS wtdbo
       RUNTIME DESTINATION bin
diff --git a/src/Wt/Dbo/backend/CMakeLists.txt b/src/Wt/Dbo/backend/CMakeLists.txt
index 1809226d..86386655 100644
--- a/src/Wt/Dbo/backend/CMakeLists.txt
+++ b/src/Wt/Dbo/backend/CMakeLists.txt
@@ -45,6 +45,9 @@ IF(ENABLE_SQLITE)
     ${Sqlite3_SRCS}
     )
 
+  #set_property( TARGET wtdbosqlite3 PROPERTY CXX_STANDARD 14 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO )
+
+
   MESSAGE("** Wt::Dbo: building SQLite3 backend.")
 
   TARGET_LINK_LIBRARIES(wtdbosqlite3
@@ -52,7 +55,8 @@ IF(ENABLE_SQLITE)
       wtdbo
     PRIVATE
       ${SQLITE3_LIBRARIES}
-      ${BOOST_DT_LIB}
+#      ${BOOST_DT_LIB}
+      Boost::date_time
       ${WT_THREAD_LIB}
       ${WT_MATH_LIBRARY}
       )
@@ -119,7 +123,8 @@ IF(ENABLE_POSTGRES AND POSTGRES_FOUND)
       wtdbo
     PRIVATE
       ${POSTGRES_LIBRARIES}
-      ${BOOST_DT_LIB}
+#      ${BOOST_DT_LIB}
+      Boost::date_time
   )
 
   INCLUDE_DIRECTORIES(${POSTGRES_INCLUDE})
diff --git a/src/Wt/Dbo/ptr b/src/Wt/Dbo/ptr
index f5d943dc..d0f20c9a 100644
--- a/src/Wt/Dbo/ptr
+++ b/src/Wt/Dbo/ptr
@@ -559,7 +559,7 @@ template <class C>
 class ptr : public ptr_base
 {
 private:
-  typedef typename boost::remove_const<C>::type MutC;
+  typedef typename std::remove_const<C>::type MutC;
 public:
   typedef C pointed;
 
diff --git a/src/Wt/Render/CssParser.C b/src/Wt/Render/CssParser.C
index cf21160e..bf4710db 100644
--- a/src/Wt/Render/CssParser.C
+++ b/src/Wt/Render/CssParser.C
@@ -41,6 +41,8 @@ using namespace Wt::Render;
 #endif
 #include <boost/spirit/include/classic_file_iterator.hpp>
 
+#include <boost/foreach.hpp>
+
 #include <map>
 
 #include <Wt/Render/Block.h>
diff --git a/src/http/CMakeLists.txt b/src/http/CMakeLists.txt
index cefbf2a7..53ae4ece 100644
--- a/src/http/CMakeLists.txt
+++ b/src/http/CMakeLists.txt
@@ -62,11 +62,11 @@ IF(CONNECTOR_HTTP)
     SET(MY_SSL_LIBS "")
  ENDIF (HAVE_SSL)
 
- IF(NOT BOOST_WTHTTP_FOUND)
+# IF(NOT BOOST_WTHTTP_FOUND)
 
-    MESSAGE(FATAL "** Could not find all boost libraries required to build the httpd connector (thread, filesystem, programoptions, datetime)")
+#    MESSAGE(FATAL "** Could not find all boost libraries required to build the httpd connector (thread, filesystem, programoptions, datetime)")
 
-  ENDIF(NOT BOOST_WTHTTP_FOUND)
+#  ENDIF(NOT BOOST_WTHTTP_FOUND)
   IF(HTTP_WITH_ZLIB)
     ADD_DEFINITIONS(-DWTHTTP_WITH_ZLIB ${ZLIB_DEFINITIONS})
     SET(MY_ZLIB_LIBS ${ZLIB_LIBRARIES})
@@ -76,7 +76,7 @@ IF(CONNECTOR_HTTP)
   ENDIF(HTTP_WITH_ZLIB)
 
   INCLUDE_DIRECTORIES(
-    ${BOOST_INCLUDE_DIRS}
+#    ${BOOST_INCLUDE_DIRS}
     ${CMAKE_CURRENT_SOURCE_DIR}/../web
     ${CMAKE_CURRENT_SOURCE_DIR}/../wt
     ${CMAKE_CURRENT_BINARY_DIR}/
@@ -85,16 +85,26 @@ IF(CONNECTOR_HTTP)
   ADD_DEFINITIONS(${ZLIB_DEFINITIONS})
   ADD_LIBRARY(wthttp ${libhttpsources})
 
+  #set_property( TARGET wthttp PROPERTY CXX_STANDARD 14 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO )
+
   TARGET_LINK_LIBRARIES(wthttp
     PUBLIC
       wt
+      Boost::logic
     PRIVATE
       ${MY_ZLIB_LIBS}
       ${MY_SSL_LIBS}
-      ${BOOST_WTHTTP_LIBRARIES}
+#      ${BOOST_WTHTTP_LIBRARIES}
       ${WT_SOCKET_LIBRARY}
       ${WIN32_STRSTRI_LIB}
   )
+  
+  
+#target_include_directories( wthttp
+#  PUBLIC
+#    ${boost_SOURCE_DIR}/libs/logic/include
+#)
+
 
   IF(BOOST_WT_MT_FOUND)
     TARGET_LINK_LIBRARIES(wthttp PRIVATE ${CMAKE_THREAD_LIBS_INIT})
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 23117e87..46f9cc57 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -146,7 +146,7 @@ IF(ENABLE_LIBWTTEST)
     )
 
     ADD_EXECUTABLE(test.http ${HTTP_TEST_SOURCES})
-    TARGET_LINK_LIBRARIES(test.http wt wthttp ${CMAKE_THREAD_LIBS_INIT} ${RT_LIBRARY})
+    TARGET_LINK_LIBRARIES(test.http wt wthttp ${CMAKE_THREAD_LIBS_INIT} ${RT_LIBRARY} Boost::unit_test )
 	IF(MSVC)
 	  SET_TARGET_PROPERTIES(test.http PROPERTIES FOLDER "test")
     ENDIF(MSVC)  
